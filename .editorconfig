# EditorConfig is awesome:http://EditorConfig.org

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8-bom

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# Web documents
[*.{html}]
indent_size = 4

# JSON files
[*.json]
indent_size = 2

# Markup documents
[*.{xml,yml,yaml,template,json}]
indent_size = 2

# CSharp code style settings:
[*.cs]
# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

csharp_style_var_for_locals = false:warning
csharp_style_var_elsewhere = false:warning
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:suggestion

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true:suggestion

##########  .NET NAMING RULES  ##########

# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true:suggestion
# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion


# Type naming rules
dotnet_naming_symbols.types.applicable_kinds = class, struct, enum, event, delegate
dotnet_naming_symbols.types.applicable_accessibilities = *
dotnet_naming_rule.types.symbols = types
dotnet_naming_rule.types.style = pascal_case
dotnet_naming_rule.types.severity = warning

# Parameter naming rules
dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_rule.parameters.symbols = parameters
dotnet_naming_rule.parameters.style = camel_case
dotnet_naming_rule.parameters.severity = warning

# Interface naming rules
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *
dotnet_naming_rule.interfaces.symbols = interfaces
dotnet_naming_rule.interfaces.style = interface
dotnet_naming_rule.interfaces.severity = warning

# Enum naming rules
dotnet_naming_symbols.enums.applicable_kinds = enum
dotnet_naming_rule.enums.symbols = enums
dotnet_naming_rule.enums.style = pascal_case
dotnet_naming_rule.enums.severity = warning

# Property/event naming rules
dotnet_naming_symbols.properties_and_events.applicable_kinds = property, event
dotnet_naming_symbols.properties_and_events.applicable_accessibilities = *
dotnet_naming_rule.properties_and_events.symbols = properties_and_events
dotnet_naming_rule.properties_and_events.style = pascal_case
dotnet_naming_rule.properties_and_events.severity = warning

# Field naming rules

# Const fields
dotnet_naming_symbols.const_fields.applicable_accessibilities = *
dotnet_naming_symbols.const_fields.required_modifiers = const
dotnet_naming_rule.const_fields.symbols = const_fields
dotnet_naming_rule.const_fields.style = all_upper
dotnet_naming_rule.const_fields.severity = warning

# Private static fields
dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_static_fields.required_modifiers = static
dotnet_naming_rule.private_static_fields.symbols = private_static_fields
dotnet_naming_rule.private_static_fields.style = s_dash_camel
dotnet_naming_rule.private_static_fields.severity = warning

# Private fields
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_rule.private_fields.symbols = private_fields
dotnet_naming_rule.private_fields.style = dash_camel
dotnet_naming_rule.private_fields.severity = warning

# Protected fields
dotnet_naming_symbols.protected_fields.applicable_kinds = field
dotnet_naming_symbols.protected_fields.applicable_accessibilities = protected, protected_internal
dotnet_naming_rule.protected_fields.symbols = protected_fields
dotnet_naming_rule.protected_fields.style = pascal_case
dotnet_naming_rule.protected_fields.severity = warning

# Public fields
dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, public_internal
dotnet_naming_rule.public_fields.symbols = public_fields
dotnet_naming_rule.public_fields.style = pascal_case
dotnet_naming_rule.public_fields.severity = warning

# Method naming rules

# Private method naming rules
dotnet_naming_symbols.private_methods.applicable_kinds = method
dotnet_naming_symbols.private_methods.applicable_accessibilities = private
dotnet_naming_rule.private_methods.symbols = private_methods
dotnet_naming_rule.private_methods.style = pascal_case
dotnet_naming_rule.private_methods.severity = warning

# Protected method naming rules
dotnet_naming_symbols.protected_methods.applicable_kinds = method
dotnet_naming_symbols.protected_methods.applicable_accessibilities = protected, protected_internal
dotnet_naming_rule.protected_methods.symbols = protected_methods
dotnet_naming_rule.protected_methods.style = pascal_case
dotnet_naming_rule.protected_methods.severity = warning

# Public method naming rules
dotnet_naming_symbols.public_methods.applicable_kinds = method
dotnet_naming_symbols.public_methods.applicable_accessibilities = public, internal
dotnet_naming_rule.public_methods.symbols = public_methods
dotnet_naming_rule.public_methods.style = pascal_case
dotnet_naming_rule.public_methods.severity = warning

# Async method naming rules

# Private async methods
dotnet_naming_symbols.private_async.applicable_kinds = method
dotnet_naming_symbols.private_async.applicable_accessibilities = private
dotnet_naming_symbols.private_async.required_modifiers = async
dotnet_naming_rule.private_async.symbols = private_async
dotnet_naming_rule.private_async.style = async_camel
dotnet_naming_rule.private_async.severity = warning

# Protected async methods
dotnet_naming_symbols.protected_async.applicable_kinds = method
dotnet_naming_symbols.protected_async.applicable_accessibilities = protected, protected_internal
dotnet_naming_symbols.protected_async.required_modifiers = async
dotnet_naming_rule.protected_async.symbols = protected_async
dotnet_naming_rule.protected_async.style = async_pascal
dotnet_naming_rule.protected_async.severity = warning

# Public async methods
dotnet_naming_symbols.public_async.applicable_kinds = method
dotnet_naming_symbols.public_async.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_async.required_modifiers = async
dotnet_naming_rule.public_async.symbols = public_async
dotnet_naming_rule.public_async.style = async_pascal
dotnet_naming_rule.public_async.severity = warning
##########  NAMING STYLES  ##########

dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.camel_case.capitalization = camel_case

dotnet_naming_style.interface.required_prefix = I
dotnet_naming_style.interface.capitalization = pascal_case

dotnet_naming_style.dash_camel.required_prefix = _
dotnet_naming_style.dash_camel.capitalization = camel_case

dotnet_naming_style.all_upper.capitalization = all_upper

dotnet_naming_style.s_dash_camel.required_prefix = s_
dotnet_naming_style.s_dash_camel.capitalization = camel_case

dotnet_naming_style.async_pascal.required_suffix = Async
dotnet_naming_style.async_pascal.capitalization = pascal_case

dotnet_naming_style.async_camel.required_suffix = Async
dotnet_naming_style.async_camel.capitalization = camel_case